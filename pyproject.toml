[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "phrasify"
dynamic = ["version"]
description = 'Anki add-on that uses LLMs like ChatGPT to turn your vocabulary flashcards into fresh sentences on the fly and have conversations using your vocabulary.'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "Mathijs van der Vlies", email = "mathijsvdvlies@solcon.nl" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "requests>=2.31.0",
  "python-dotenv>=1.0.0"
]
[project.optional-dependencies]
anki = ["anki>=2.1.66", "aqt[qt6]>=2.1.66"]
api = ["fastapi", "fastapi-versionizer", "uvicorn"]

[tool.rye]
dev-dependencies = [
  "anki>=2.1.66", "aqt[qt6]>=2.1.66", "langchain"
]

[project.urls]
Documentation = "https://github.com/mathijsvdv/phrasify#readme"
Issues = "https://github.com/mathijsvdv/phrasify/issues"
Source = "https://github.com/mathijsvdv/phrasify"

[tool.hatch.version]
path = "src/phrasify/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "ipykernel",
  "nbstripout",
  "anki>=2.1.66",
  "aqt[qt6]>=2.1.66",
  "fastapi",
  "fastapi-versionizer",
  "uvicorn",
  "langchain",
]

[tool.hatch.envs.default.scripts]
ipykernel_install = "python -m ipykernel install --user --name phrasify --display-name \"Python (phrasify)\""
nbstripout_install = "python -m nbstripout --install --attributes .gitattributes"
site_packages_path = "python -c 'import sysconfig; print(sysconfig.get_paths()[\"purelib\"])'"

[tool.hatch.envs.test]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-mock",
]

[tool.hatch.envs.test.scripts]
run = "pytest {args:tests}"
cov = "pytest {args:tests} --cov --junitxml=junit/test-results.xml --cov-report term-missing --cov-report=xml --cov-report=html"

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/phrasify tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.pytest.ini_options]
markers = [
  "slow: mark test as slow to run (deselect with '-m \"not slow\"')",
  "expensive: mark test as expensive (costly) to run (deselect with '-m \"not expensive\"')",
]

[tool.black]
target-version = ["py38"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107", "S311",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Allow relative imports - this structure is needed for the Anki Add-on to work
  "TID252",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["phrasify"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
