[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "phrasify"
dynamic = ["version"]
description = 'Anki add-on that uses LLMs like ChatGPT to turn your vocabulary flashcards into fresh sentences on the fly and have conversations using your vocabulary.'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "Mathijs van der Vlies", email = "mathijsvdvlies@solcon.nl" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "requests>=2.31.0",
  "python-dotenv>=1.0.0",
]
[project.optional-dependencies]
anki = ["anki>=2.1.66", "aqt[qt6]>=2.1.66"]

[project.urls]
Documentation = "https://github.com/mathijsvdv/phrasify#readme"
Issues = "https://github.com/mathijsvdv/phrasify/issues"
Source = "https://github.com/mathijsvdv/phrasify"

[tool.hatch.version]
path = "src/phrasify/__about__.py"

[tool.hatch.env]
requires = ["hatch-pip-compile"]

[tool.hatch.envs.template]
template = "template"
type = "pip-compile"
pip-compile-resolver = "uv"
pip-compile-installer = "uv"
lock-filename = "requirements/{env_name}.txt"
python = "3.9"

[tool.hatch.envs.template.scripts]
site-packages-path = "python -c 'import sysconfig; print(sysconfig.get_paths()[\"purelib\"])'"

[tool.hatch.envs.default]
template = "template"
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "ipykernel",
  "nbstripout",
  "anki>=2.1.66",
  "aqt[qt6]>=2.1.66",
  "fastapi",
  "fastapi-versionizer",
  "uvicorn",
  "langchain",
]

[tool.hatch.envs.default.scripts]
install-ipykernel = "python -m ipykernel install --user --name phrasify --display-name \"Python (phrasify)\""
install-nbstripout = "python -m nbstripout --install --attributes .gitattributes"

[tool.hatch.envs.test]
template = "template"
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-mock",
]

[tool.hatch.envs.test.scripts]
run = "make _test"
cov = "make _test_cov"

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.app]
template = "template"
dependencies = [
  "fastapi",
  "fastapi-versionizer",
  "uvicorn",
]

[tool.hatch.envs.app.scripts]
serve = "uvicorn src.phrasify_api.main:app --port {args:8800} --reload"

[tool.pytest.ini_options]
markers = [
  "slow: mark test as slow to run (deselect with '-m \"not slow\"')",
  "expensive: mark test as expensive (costly) to run (deselect with '-m \"not expensive\"')",
]

[tool.black]
target-version = ["py38"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107", "S311",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Allow relative imports - this structure is needed for the Anki Add-on to work
  "TID252",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["phrasify"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
